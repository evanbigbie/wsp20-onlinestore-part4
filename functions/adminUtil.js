
var admin = require("firebase-admin");
// is this the right place for these dependencies or should they be in index.js?
var nodemailer = require("nodemailer");
// var sgTransport = require('./nodemailer-send-transport.js');

// private key info generated by firebase
var serviceAccount = require("./williamb-wsp20-firebase-adminsdk-9wte0-10c1399231.json");

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://williamb-wsp20.firebaseio.com"
});

const Constants = require('./myconstants.js')

////////////////////////////////////
async function createUser(req, res) {

  const email = req.body.email
  const password = req.body.password
  const displayName = req.body.displayName
  const phoneNumber = req.body.phoneNumber
  const photoURL = req.body.photoURL

  try {
    await admin.auth().createUser(
      {email, password, displayName, phoneNumber, photoURL}
    )
    // here error is just what gets displayed in red in signup.ejs
    res.render('signin.ejs', {page: 'signin', user: false, error: 'Account created! Sign in please', cartCount: 0})
  } catch (e) {
    res.render('signup.ejs', {error: e, user: false, page: 'signup', cartCount: 0})
  }
}

async function email(htmlForInvoice) {                                  // *****
  try {
    console.log('====== test')

    // create reusable transporter object using the default SMTP transport
    let transporter = nodemailer.createTransport({
      service:'Gmail',
      auth: {
          user: 'wbigbie@gmail.com',
          pass: '---------'
      },
      debug: false,
      logger: true 
    });
    console.log('======= htmlForInvoice: ', htmlForInvoice)

    // send mail with defined transport object
    let info = await transporter.sendMail({
      from: "wbigbie@gmail.com", // sender address
      to: "wbigbie@gmail.com", // list of receivers
      subject: "Hello", // Subject line
      text: htmlForInvoice // plain text body
    });
    console.log('======= it worked son')
  } catch (e) {
    console.log('======', e)
  }
  
}

async function listUsers(req, res) {
  try {
    const userRecord = await admin.auth().listUsers()
    res.render('admin/listUsers.ejs', {users: userRecord.users, error: false})
  } catch (e) {
    res.render('admin/listUsers.ejs', {users: false, error: e})
  }
}

async function verifyIdToken(idToken) {
  try {
    // if the token matches/untampered then return it
    const decodedIdToken = await admin.auth().verifyIdToken(idToken)
    return decodedIdToken
  } catch (e) {
    return null
  }
}

async function getOrderHistory(decodedIdToken) {
  try {
    const collection = admin.firestore().collection(Constants.COLL_ORDERS)
      let orders = []
      const snapshot = await collection.where("uid", "==", decodedIdToken.uid).orderBy("timestamp").get()
      snapshot.forEach(doc => {
          orders.push(doc.data())
        })
        return orders
  } catch (e) {
    return null
  }
}

//////////////////////////////
async function checkOut(data) {
  data.timestamp = admin.firestore.Timestamp.fromDate(new Date())
  invoiceHtml()
  try {
    const collection = admin.firestore().collection(Constants.COLL_ORDERS)
    await collection.doc().set(data)
  } catch (e) {
    throw e
  }
}

async function invoiceHtml() {                                         // *****
  var htmlForInvoice = 'test html'
  // cart = ShoppingCart.deserialize(req.session.cart)
  try {
    console.log('====== test')
    // for (let i = 0; i < cart.contents.length; i++) {
    //   htmlForInvoice = htmlForInvoice + cart.contents[i].product.name
    // }
    // create reusable transporter object using the default SMTP transport
    let transporter = nodemailer.createTransport({
      service:'Gmail',
      auth: {
          user: 'wbigbie@gmail.com',
          pass: 'Vinyl1349'
      },
      debug: false,
      logger: true 
    });
    console.log('======= htmlForInvoice: ', htmlForInvoice)

    // send mail with defined transport object
    let info = await transporter.sendMail({
      from: "wbigbie@gmail.com", // sender address
      to: "wbigbie@gmail.com", // list of receivers
      subject: "invoice", // Subject line
      text: 'html for invoice' // plain text body
    });
    console.log('======= it worked!')
  } catch (e) {
    console.log('======', e)
  }
  // `
  // <table class="table table-striped">
  //     <thead>
  //       <tr>
  //         <th scope="col">Name</th>
  //       </tr>
  //     </thead>
  //     <tbody>
  // `
        // for (let i = 0; i < cart.contents.length; i++) {
        //   htmlForInvoice = htmlForInvoice + '<tr><td>cart.contents[i].product.name }</td></tr></tbody></table>'
        // }
    //     <tr>
    //       {/* <th scope="row"><img width=50 height=50 src="<%= cart.contents[i].product.image_url%>"></th> */}
    //       <td>cart.contents[i].product.name</td>
    //       {/* <td>cart.contents[i].product.price.toFixed(2)</td>
    //       <td>cart.contents[i].qty</td>
    //       <td>(cart.contents[i].qty * cart.contents[i].product.price).toFixed(2)</td>
    //       <td>cart.contents[i].product.summary</td> */}
    //     </tr>
    //     }
    //   </tbody>
    // </table>
    // <h2>TOTAL: <%= cart.getTotal().toFixed(2) %></h2>
}

module.exports = {
  createUser,
  email,
  listUsers,
  verifyIdToken,
  getOrderHistory,
  checkOut,
}



/* <th scope="col">Image</th>

<th scope="col">Price</th>
          <th scope="col">Qty</th>
          <th scope="col">Sub-Total</th>
          <th scope="col">Summary</th> */